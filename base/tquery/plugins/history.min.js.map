{"version":3,"file":"history.min.js","sources":["history.js"],"sourcesContent":[";//! $ID: history.js 2020.06.18 tQuery.Plugins $\r\n//+++++++++++++++++++++++++++++++++++++++++++++++\r\n//  Project: dom-history v0.1.0\r\n//  E-Mail:  zhliner@gmail.com\r\n//  Copyright (c) 2020 - 2021 铁皮工作室  MIT License\r\n//\r\n//////////////////////////////////////////////////////////////////////////////\r\n//\r\n//  节点树修改监听/记录历史。\r\n//  利用 tQuery 节点变化定制事件机制，跟踪对节点的修改，创建历史记录以便于撤销。\r\n//\r\n//  改变之前的事件可能因为其它处理器阻止改变，所以需要监听改变后的事件，\r\n//  它们包括：\r\n//  - 特性变化：attrdone\r\n//  - 属性变化：propdone\r\n//  - 样式变化：styledone\r\n//  - 类名变化：classdone\r\n//  - 内容变化：nodeok, detached, emptied, normalized\r\n//\r\n//  - 事件处理绑定变化：bound, unbound\r\n//\r\n//  适用前提\r\n//  --------\r\n//  限于tQuery接口调用，如果用户直接调用DOM接口修改节点则无法跟踪。\r\n//\r\n//  使用：\r\n//  - 配置 tQuery.config() 以支持定制事件的激发。\r\n//  - 创建一个全局的 History 实例作为事件处理器，绑定上面的事件到目标根元素上。\r\n//  - 籍由事件的触发，会自动记录该元素及其子孙元素的变化历史。\r\n//  - 调用 .back(n) 即可回退 DOM 的变化。\r\n//\r\n//  注意：\r\n//  back即为undo的逻辑，redo需要用户自己编写（比如操作实例化）。\r\n//  监听事件通常绑定在上层容器上，因此脱离节点树的节点的变化无法监听。\r\n//\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\n//\r\n\r\nconst $ = (this || window).$;\r\n\r\n\r\n//\r\n// 变化处理器映射。\r\n// event-type: function(event): {.back}\r\n//\r\nconst __Handles = {\r\n    // 简单变化。\r\n    attrdone:   ev => switchType( ev.target, ev.detail, Attr ),\r\n    propdone:   ev => switchType( ev.target, ev.detail, Prop ),\r\n    styledone:  ev => new Style( ev.target, ev.detail ),\r\n    classdone:  ev => new Class( ev.target, ev.detail[2] ),\r\n\r\n    // 节点变化。\r\n    nodesdone:  ev => new Nodesdone( ev.detail[0] ),\r\n    nodeok:     ev => new Nodesdone( [ev.target] ),  // 冗余无害（方便用户）\r\n    detach:     ev => new Remove( ev.target ),\r\n    emptied:    ev => new Emptied( ev.target, ev.detail ),\r\n    // 事前提取信息。\r\n    normalize:  ev => new Normalize( ev.target ),\r\n\r\n    // 事件绑定变化。\r\n    bound:      ev => new Bound( ev.target, ...ev.detail ),\r\n    unbound:    ev => new Unbound( ev.target, ...ev.detail ),\r\n};\r\n\r\n\r\n\r\n//\r\n// 历史记录器。\r\n// 汇集节点改变的回溯（.back）操作实例。\r\n//\r\nclass History {\r\n    /**\r\n     * 构造一个记录器。\r\n     * 缓存池长度由外部管理（.prune）。\r\n     */\r\n    constructor() {\r\n        this._buf = [];\r\n    }\r\n\r\n\r\n    /**\r\n     * 事件触发处理器。\r\n     * @param {Event} ev 定制事件对象\r\n     */\r\n    handleEvent( ev ) {\r\n        let _o = __Handles[ev.type]( ev );\r\n\r\n        if ( _o.changed() ) {\r\n            this._buf.push( _o );\r\n        }\r\n        ev.stopPropagation();  // 避免重复记录。\r\n    }\r\n\r\n\r\n    /**\r\n     * 回溯操作。\r\n     * @param {Number} n 回溯项数\r\n     */\r\n    back( n ) {\r\n        n > 0 && callBack( () => this._backs(this._buf, n) );\r\n    }\r\n\r\n\r\n    /**\r\n     * 获取当前缓存池大小。\r\n     * @return {Number}\r\n     */\r\n    size() {\r\n        return this._buf.length;\r\n    }\r\n\r\n\r\n    /**\r\n     * 缓存池头部剪除。\r\n     * @param {Number} n 清除数量\r\n     */\r\n    prune( n ) {\r\n        if ( n > 0 ) {\r\n            this._buf.splice( 0, n );\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 清空缓存池。\r\n     * @return {void}\r\n     */\r\n    clear() {\r\n        this._buf.length = 0;\r\n    }\r\n\r\n\r\n    /**\r\n     * 批量回退。\r\n     * @param {[.back]} buf 实例集引用\r\n     * @param {Number} n 回退数量\r\n     */\r\n    _backs( buf, n ) {\r\n        buf.splice( -n )\r\n        .reverse()\r\n        .forEach( obj => obj.back() );\r\n    }\r\n}\r\n\r\n\r\n//\r\n// 基础操作类。\r\n// 注意：调用回退（.back）接口时需要关闭定制事件激发。\r\n///////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n//\r\n// 元素特性修改。\r\n// 关联事件：attrdone\r\n//\r\nclass Attr {\r\n    /**\r\n     * 注：name已为完整的名称。\r\n     * @param {Element} el 目标元素\r\n     * @param {String} name 目标特性名（最终）\r\n     * @param {String|null} val 之前的值\r\n     */\r\n    constructor( el, [name, val] ) {\r\n        this._el = el;\r\n        this._name = name;\r\n        this._old = val;\r\n    }\r\n\r\n\r\n    back() {\r\n        if ( this._old === null ) {\r\n            return this._el.removeAttribute( this._name );\r\n        }\r\n        this._el.setAttribute( this._name, this._old );\r\n    }\r\n\r\n\r\n    /**\r\n     * 特性值是否已改变。\r\n     */\r\n    changed() {\r\n        return this._el.getAttribute( this._name ) !== this._old;\r\n    }\r\n}\r\n\r\n\r\n//\r\n// 元素属性修改。\r\n// 关联事件：propdone\r\n//\r\nclass Prop {\r\n    /**\r\n     * val为数组时，操作的是<select multiple>\r\n     * @param {Element} el 目标元素\r\n     * @param {String} name 目标属性名（最终）\r\n     * @param {Value|[Value]} val 之前的值\r\n     * @param {Boolean} dname 是否为data名称（驼峰式）\r\n     */\r\n    constructor( el, [name, val, dname] ) {\r\n        this._el = el;\r\n        this._name = name;\r\n        this._old = val;\r\n        this._isdn = dname;\r\n    }\r\n\r\n\r\n    back() {\r\n        if ( this._isdn ) {\r\n            this._el.dataset[ this._name ] = this._old;\r\n        } else {\r\n            this._el[ this._name ] = this._old;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 属性值是否已改变。\r\n     */\r\n    changed() {\r\n        if ( this._isdn ) {\r\n            return this._el.dataset[ this._name ] !== this._old;\r\n        }\r\n        return this._el[ this._name ] !== this._old;\r\n    }\r\n}\r\n\r\n\r\n//\r\n// 两个特殊属性/特性修改。\r\n// 即 $.prop()|.attr() 中的 text|html 设置。\r\n//\r\nclass Fillx2 {\r\n    /**\r\n     * @param {Element} el 目标元素\r\n     * @param {[Node]} old 之前的内容\r\n     */\r\n    constructor( el, old ) {\r\n        this._box = el;\r\n        this._nds = old;\r\n    }\r\n\r\n\r\n    back() {\r\n        this._box.textContent = '';\r\n        this._box.append( ...this._nds );\r\n    }\r\n\r\n\r\n    /**\r\n     * 内容值是否已改变。\r\n     * 改变之前和之后任一时刻有值即为真。\r\n     * 注：值本身没有可比较性。\r\n     */\r\n    changed() {\r\n        return this._nds.length > 0 || this._box.textContent !== '';\r\n    }\r\n}\r\n\r\n\r\n//\r\n// 内联样式修改。\r\n// 关联事件：styledone\r\n//\r\nclass Style {\r\n    /**\r\n     * @param {Element} el 目标元素\r\n     * @param {String} name 样式属性名\r\n     * @param {String} val 之前的样式值（已规范）\r\n     */\r\n    constructor( el, [name, val] ) {\r\n        this._el = el;\r\n        this._name = name;\r\n        this._old = val;\r\n    }\r\n\r\n\r\n    // 注记：\r\n    // 浏览器在设置样式时会自动调整style特性值本身。\r\n    // 因此这里并不寻求恢复style的原始特性值。\r\n    back() {\r\n        this._el.style[ this._name ] = this._old;\r\n        this._el.style.cssText || this._el.removeAttribute( 'style' );\r\n    }\r\n\r\n\r\n    /**\r\n     * 样式值是否已改变。\r\n     */\r\n    changed() {\r\n        return this._el.style[ this._name ] !== this._old;\r\n    }\r\n}\r\n\r\n\r\n//\r\n// 元素类名修改。\r\n// 关联事件：classdone\r\n//\r\nclass Class {\r\n    /**\r\n     * @param {Element} el 目标元素\r\n     * @param {[String]} old 之前的类名集\r\n     */\r\n    constructor( el, old ) {\r\n        this._el = el;\r\n        this._ns = old;\r\n    }\r\n\r\n\r\n    back() {\r\n        this._el.removeAttribute( 'class' );\r\n\r\n        this._ns.length &&\r\n        this._ns.forEach( n => this._el.classList.add(n) );\r\n    }\r\n\r\n\r\n    /**\r\n     * 类名集是否已改变。\r\n     */\r\n    changed() {\r\n        let _set = new Set(\r\n            this._el.classList\r\n        );\r\n        return this._ns.length !== _set.size || this._ns.some( n => !_set.has(n) );\r\n    }\r\n}\r\n\r\n\r\n//\r\n// 事件已绑定。\r\n// 关联事件：bound\r\n//\r\nclass Bound {\r\n    /**\r\n     * 注记：\r\n     * 不需区分是否为单次（one）绑定。\r\n     * @param {Element} el 目标元素\r\n     * @param {String} evn 目标事件名\r\n     * @param {String} slr 委托选择器\r\n     * @param {Function|EventListener} handle 事件处理器（用户）\r\n     * @param {Boolean} cap 是否为捕获\r\n     */\r\n    constructor( el, evn, slr, handle, cap ) {\r\n        this._el = el;\r\n        this._evn = evn;\r\n        this._slr = slr;\r\n        this._handle = handle;\r\n        this._cap = cap;\r\n    }\r\n\r\n\r\n    /**\r\n     * 如果为克隆绑定，由EventClone处理。\r\n     */\r\n    back() {\r\n        $.off(\r\n            this._el,\r\n            this._evn, this._slr, this._handle,\r\n            this._cap\r\n        );\r\n    }\r\n\r\n\r\n    /**\r\n     * 绑定状况是否已改变。\r\n     * 外部已保证确实有绑定操作才会激发事件，因此无条件返回true。\r\n     */\r\n    changed() {\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n//\r\n// 事件已解绑。\r\n// 关联事件：unbound\r\n//\r\nclass Unbound {\r\n    /**\r\n     * @param {Element} el 目标元素\r\n     * @param {String} evn 目标事件名\r\n     * @param {String} slr 委托选择器\r\n     * @param {Function|EventListener} handle 事件处理器（用户）\r\n     * @param {Boolean} cap 是否为捕获\r\n     * @param {Boolean} once 是否为单次绑定\r\n     */\r\n    constructor( el, evn, slr, handle, cap, once ) {\r\n        this._el = el;\r\n        this._evn = evn;\r\n        this._slr = slr;\r\n        this._handle = handle;\r\n        this._cap = cap;\r\n        this._once = once;\r\n    }\r\n\r\n\r\n    back() {\r\n        let _fn = this._once ?\r\n            'one' :\r\n            'on';\r\n        $[_fn]( this._el, this._evn, this._slr, this._handle, this._cap );\r\n    }\r\n\r\n\r\n    /**\r\n     * 绑定状况是否已改变。\r\n     * 外部已保证确实已绑定才会解绑，因此返回true。\r\n     */\r\n    changed() {\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n\r\n//\r\n// 节点操作类。\r\n// 因为DOM节点是移动式操作，故仅需记录节点的脱离行为。\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n//\r\n// 节点已进入。\r\n// 关联事件：nodesdone\r\n// 数据节点已事先脱离DOM。\r\n// 适用方法：.prepend, .append, .before, .after, replace\r\n//\r\nclass Nodesdone {\r\n    /**\r\n     * @param {[Node]} nodes 已插入节点集\r\n     */\r\n    constructor( nodes ) {\r\n        this._nodes = nodes;\r\n    }\r\n\r\n\r\n    back() {\r\n        this._nodes.forEach( nd => nd.remove() );\r\n    }\r\n\r\n\r\n    /**\r\n     * 外部已保证确实有内容插入，因此简单返回true。\r\n     */\r\n    changed() {\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n//\r\n// 节点待移除。\r\n// 关联事件：detach\r\n//\r\nclass Remove {\r\n    /**\r\n     * @param {Node} node 待移除的节点\r\n     */\r\n    constructor( node ) {\r\n        this._node = node;\r\n        this._prev = node.previousSibling;\r\n        this._box = node.parentNode;\r\n    }\r\n\r\n\r\n    back() {\r\n        if ( this._prev ) {\r\n            return this._prev.after( this._node );\r\n        }\r\n        this._box.prepend( this._node );\r\n    }\r\n\r\n\r\n    /**\r\n     * 外部已保证确实有删除才会激发事件，因此返回true。\r\n     */\r\n    changed() {\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n//\r\n// 元素已清空。\r\n// 关联事件：emptied\r\n// 注记：\r\n// 已经为空的元素不会触发事件。\r\n//\r\nclass Emptied {\r\n    /**\r\n     * @param {Element} el 容器元素\r\n     * @param {[Node]} subs 子节点集\r\n     */\r\n    constructor( el, subs ) {\r\n        this._box = el;\r\n        this._data = subs;\r\n    }\r\n\r\n\r\n    back() {\r\n        this._data.length > 0 && this._box.prepend( ...this._data );\r\n    }\r\n\r\n\r\n    /**\r\n     * 外部已保证确实有内容才会清空，因此返回true。\r\n     */\r\n    changed() {\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n//\r\n// 元素规范化之前。\r\n// 关联事件：normalize\r\n// 处理.normalize()将有的变化。\r\n//\r\nclass Normalize {\r\n    /**\r\n     * 提取相邻文本节点集分组。\r\n     * 对每一组提前处理。\r\n     * @param {Element} el 事件主元素\r\n     */\r\n    constructor( el ) {\r\n        let _all = $.textNodes( el )\r\n            .filter(\r\n                (nd, i, arr) => adjacent(nd, arr[i - 1], arr[i + 1])\r\n            );\r\n        this._buf = adjacentTeam(_all).map( nodes => new Texts(nodes) );\r\n    }\r\n\r\n\r\n    back() {\r\n        this._buf.forEach( obj => obj.back() );\r\n    }\r\n\r\n\r\n    /**\r\n     * 是否存在改变。\r\n     */\r\n    changed() {\r\n        return this._buf.length > 0;\r\n    }\r\n}\r\n\r\n\r\n//\r\n// 相邻文本节点处理。\r\n// 涉及到划选区域的问题，规范化由浏览器自己执行。\r\n// 注记：\r\n// 浏览器执行normalize()后，会维持原选取范围（Range）。\r\n// 备忘：\r\n// 如下手动处理方式会导致范围变化，因此不应采用。\r\n// - 保留首个文本节点引用（同浏览器行为）。\r\n// - 移除首个文本节点之外的相邻节点。\r\n// - 首个文本节点赋值textContent属性为wholeText。\r\n//\r\nclass Texts {\r\n    /**\r\n     * nodes为一组相邻文本节点集。\r\n     * @param {[Text]} nodes 节点集\r\n     */\r\n    constructor( nodes ) {\r\n        let _nd0 = nodes.shift(),\r\n            _tx0 = _nd0.textContent;\r\n\r\n        this._ref = _nd0;\r\n        this._txt0 = _tx0;\r\n        this._data = nodes;\r\n    }\r\n\r\n\r\n    back() {\r\n        this._ref.textContent = this._txt0;\r\n        this._ref.after( ...this._data );\r\n    }\r\n}\r\n\r\n\r\n//\r\n// 工具函数\r\n///////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n/**\r\n * 相邻节点过滤器。\r\n * 检查集合中的节点是否为相邻节点。\r\n * @param  {Node} cur 当前节点\r\n * @param  {Node|undefined} prev 集合中前一个节点\r\n * @param  {Node|undefined} next 集合中下一个节点\r\n * @return {Boolean}\r\n */\r\nfunction adjacent( cur, prev, next ) {\r\n    // null !== undefined\r\n    return cur.previousSibling === prev || cur.nextSibling === next;\r\n}\r\n\r\n\r\n/**\r\n * 相邻节点集分组。\r\n * 源节点集中包含了多组不同的相邻节点。\r\n * @param  {[Node]} nodes 有序节点集\r\n * @return {[[Node]]}\r\n */\r\nfunction adjacentTeam( nodes ) {\r\n    if ( nodes.length == 0 ) {\r\n        return [];\r\n    }\r\n    let _sub = [nodes.shift()],\r\n        _buf = [_sub];\r\n\r\n    for ( const nd of nodes ) {\r\n        if ( nd.previousSibling === _sub[_sub.length-1] ) {\r\n            _sub.push( nd );\r\n            continue;\r\n        }\r\n        _buf.push( (_sub = [nd]) );\r\n    }\r\n    return _buf;\r\n}\r\n\r\n\r\n/**\r\n * 判断创建特殊属性设置类。\r\n * @param  {Element} el 目标元素\r\n * @param  {[Value]} data 传送的数据\r\n * @param  {Class} T  待定类（Attr|Prop）\r\n * @return {Fillx2|T}\r\n */\r\nfunction switchType( el, data, T ) {\r\n    return ( data[0] === 'text' || data[0] === 'html' ) ? new Fillx2( el, data[1] ) : new T( el, data );\r\n}\r\n\r\n\r\n/**\r\n * 调用回溯函数。\r\n * 需要临时关闭节点变化跟踪。\r\n * @param {Function} handle 回调操作\r\n */\r\nfunction callBack( handle ) {\r\n    let _old = $.config({\r\n        varyevent: null,\r\n        bindevent: null,\r\n    });\r\n    try {\r\n        return handle();\r\n    }\r\n    finally { $.config( _old ) }\r\n}\r\n\r\n\r\n// 友好导出备用。\r\nHistory.Normalize = Normalize;\r\n\r\n\r\nexport default History;\r\n"],"names":["$","window","__Handles","attrdone","ev","switchType","target","detail","Attr","propdone","Prop","styledone","Style","classdone","Class","nodesdone","Nodesdone","nodeok","detach","Remove","emptied","Emptied","normalize","Normalize","bound","Bound","unbound","Unbound","History","constructor","this","_buf","handleEvent","_o","type","changed","push","stopPropagation","back","n","handle","_old","config","varyevent","bindevent","callBack","_backs","size","length","prune","splice","clear","buf","reverse","forEach","obj","el","name","val","_el","_name","removeAttribute","setAttribute","getAttribute","dname","_isdn","dataset","Fillx2","old","_box","_nds","textContent","append","style","cssText","_ns","classList","add","_set","Set","some","has","evn","slr","cap","_evn","_slr","_handle","_cap","off","once","_once","_fn","nodes","_nodes","nd","remove","node","_node","_prev","previousSibling","parentNode","after","prepend","subs","_data","_all","textNodes","filter","i","arr","adjacent","cur","prev","next","nextSibling","_sub","shift","adjacentTeam","map","Texts","_nd0","_tx0","_ref","_txt0","data","T"],"mappings":"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"}